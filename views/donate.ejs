<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Donate</title>
    <style>
        #map {
            width: 300px;
            height: 300px;
        }

        body {
            display: grid;
            place-content: center;
        }

        div {
            display: flex;
            flex-direction: column;
        }

        .table {
            flex-direction: row;
            gap: 10px;
            flex-wrap: wrap;
        }

        .card {
            display: flex;
            flex-direction: column;
            background-color: rgb(24, 250, 163);
            width: 45vw;
            height: fit-content;
            padding: 2dvh 2vw;
            border-radius: 2vw;
        }

        .inv {
            display: none;
        }
        button,input{
            width: 70vw;
            text-align: center;
        }
        .content{
            flex-direction: column;
            align-items: center;
        }

    </style>
    <script type="module" src="./index.js"></script>
</head>

<body>

    <div class="content">
        <input placeholder="City" type="city" id="city" />
        <button id="submit">Search</button>
        <button id="locate">Use Current location</button>
        <div class="dropdown type">
            <button class="dropdownBtn type" id="typeBtn">ANY</button>
            <div class="optionsType inv">
                <button id="any">ANY</button>
                <button id="food">FOOD</button>
                <button id="clothes">CLOTHES</button>
                <button id="money">MONEY</button>
            </div>
        </div>
        <h1 id="place"></h1>
    </div>
    <div class="table">
    </div>
    <div id="map"></div>

    <!-- prettier-ignore -->

    <script>(g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "AIzaSyA4IGQAa3lWLh2jy1gRqEjybQ5aAqVDKcg", v: "weekly" });</script>


    <script type="module">
        //Google Maps




        //firebase setup start
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";


        const firebaseConfig = {
            apiKey: "AIzaSyBArOVoz0GEbbHzROw3CQy21xKzJZZBoyg",
            authDomain: "gdsc-solution-d963e.firebaseapp.com",
            databaseURL: "https://gdsc-solution-d963e-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: "gdsc-solution-d963e",
            storageBucket: "gdsc-solution-d963e.appspot.com",
            messagingSenderId: "868921508827",
            appId: "1:868921508827:web:4fb017bdd70b8a4ad19dfe",
            measurementId: "G-Q8HQPBRYC8"
        };


        const app = initializeApp(firebaseConfig);

        import { getDatabase, ref, child, get, set, update, remove } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js";

        const db = getDatabase();
        // fire base setup end   



        //------------------------------------------------------------------------------------------------>>




        var type = 0;
        function showDropOptions() {
            document.querySelector(".optionsType").classList.toggle("inv");
        }
        function any() {
            type = 0;
            document.querySelector(".optionsType").classList.toggle("inv");
            document.getElementById("typeBtn").innerHTML = "ANY";
        }
        function food() {
            type = 1;
            document.querySelector(".optionsType").classList.toggle("inv");
            document.getElementById("typeBtn").innerHTML = "FOOD";
        }
        function clothes() {
            type = 2;
            document.querySelector(".optionsType").classList.toggle("inv");
            document.getElementById("typeBtn").innerHTML = "CLOTHES";
        }
        function money() {
            type = 3;
            document.querySelector(".optionsType").classList.toggle("inv");
            document.getElementById("typeBtn").innerHTML = "MONEY";
        }
        document.getElementById("typeBtn").addEventListener("click", showDropOptions);
        document.getElementById("food").addEventListener("click", food);
        document.getElementById("money").addEventListener("click", money);
        document.getElementById("clothes").addEventListener("click", clothes);
        document.getElementById("any").addEventListener("click", any);



        //------------------------------------------------------------------------------------------------------------------------------>>>>



        //to get location of user
        function showCity(position) {
            var lat = position.coords.latitude;
            var long = position.coords.longitude;
            console.log(lat, long);
            // Make a request to a Geocoding API (e.g. Google Maps Geocoding API)
            const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=AIzaSyAdQUa5-QKIL38-Hw6-Z9lN8AmfMEguFJU`;
            var city = "";
            fetch(url)
                .then((response) => response.json())
                .then((data) => {
                    // Parse the city name from the API response
                    console.log(data);
                    city = data.results[0].address_components.find((component) =>
                        component.types.includes("locality")
                    ).long_name;

                    var dis = 10;
                    searchCityWithDistance(city, dis, lat, long);
                    console.log(city);
                    console.log(data[0]);
                })
                .catch((error) => console.log(error));
        }


        let SubmitBtn = document.getElementById("submit");

        const lula = (t, path) =>
            path.split(".").reduce((r, k) => r?.[k], t)

        function getData() {
            var city = document.getElementById("city").value;
            city = city.slice(0, 1).toUpperCase() + city.slice(1).toLowerCase();
            searchCity(city);
        }
        function searchCity(city) {
            document.querySelector(".table").innerHTML = "";
            const dbRef = ref(db);
            document.getElementById('place').innerHTML = city;
            get(child(dbRef, 'city/' + city)).then((snapshot) => {
                if (snapshot.exists()) {
                    for (var i = 1; i <= Object.keys(snapshot.val()).length; i++) {

                        var addr = lula(snapshot.val(), `id${i}.address`);
                        console.log(addr);
                        document.querySelector(".table").innerHTML += `
                                <div class= "card">
                                    <h1>Name: ${lula(snapshot.val(), `id${i}.name`)}</h1>
                                    <h1>Address: ${lula(snapshot.val(), `id${i}.address`)}</h1>
                                    <h1>Contact: ${lula(snapshot.val(), `id${i}.contact`)}</h1>
                                    <h1>E-mail: ${lula(snapshot.val(), `id${i}.email`)}</h1>
                                </div>`;
                    }
                    let map;

                    async function initMap() {
                        const { Map } = await google.maps.importLibrary("maps");

                        map = new Map(document.getElementById("map"), {
                            center: { lat: 26.6, lng: 77.08 },
                            zoom: 6,

                        });
                        for (let i = 1; i <= Object.keys(snapshot.val()).length; i++) {
                            var lat = Number(lula(snapshot.val(), `id${i}.latitude`));
                            var long = Number(lula(snapshot.val(), `id${i}.longitude`));
                            console.log(lat, long);
                            new google.maps.Marker({
                                position: { lat: lat, lng: long },
                                map: map,
                                draggable: false,
                                animation: google.maps.Animation.DROP,

                            })
                        }

                    }

                    initMap();

                }
                else {
                    alert("No data available for this city");
                }
            })
                .catch((error) => {
                    alert("Error");
                    console.log("Error in searchCity");
                });
        }
        SubmitBtn.addEventListener("click", getData);

        const start = document.querySelector('#locate');

        start.addEventListener("click", () => {
            navigator.geolocation.getCurrentPosition(showCity)
        })

        function searchCityWithDistance(city, maxDis, lat, long) {
            document.getElementById('place').innerHTML = city;
            var dis = 0;
            document.querySelector(".table").innerHTML = "";
            const dbRef = ref(db);
            get(child(dbRef, 'city/' + city)).then((snapshot) => {
                console.log(snapshot.val());
                if (snapshot.exists()) {
                    for (var i = 1; i <= Object.keys(snapshot.val()).length; i++) {
                        console.log("Rec->->");
                        console.log(snapshot.val());
                        dis = getDistanceFromLatLonInKm(lat, long, lula(snapshot.val(), `id${i}.latitude`), lula(snapshot.val(), `id${i}.longitude`));
                        console.log(city);
                        console.log("DIS======" + dis);
                        if (dis <= maxDis) {
                            console.log(snapshot.val());
                            document.querySelector(".table").innerHTML += `
                                <div class= "card">
                                    <h1>Name: ${lula(snapshot.val(), `id${i}.name`)}</h1>
                                    <h1>Address: ${lula(snapshot.val(), `id${i}.address`)}</h1>
                                    <h1>Contact: ${lula(snapshot.val(), `id${i}.contact`)}</h1>
                                    <h1>E-mail: ${lula(snapshot.val(), `id${i}.email`)}</h1>
                                </div>`;
                        } else {
                            if (i == 1 && lula(snapshot.val(), `id${i}.address`) != undefined) {
                                dis = Math.floor(dis * 100) / 100;
                                alert("No data in the given distance, closest available in " + dis + " km away");
                            }
                        }
                    }

                }
                else {
                    alert("No data available for this city");
                }
            })
                .catch((error) => {
                    alert("Error");
                    console.log("Error in searchCityWithDistance");
                });
        }

        //------------------------------------------------------------------------------------------>>




        //to calculate distance using latitudes and longitudes    

        function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(lat2 - lat1);  // deg2rad below
            var dLon = deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2)
                ;
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180)
        }





    </script>

</body>

</html>
